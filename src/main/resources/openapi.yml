openapi: 3.0.1
info:
  title: Todo API
  description: Todo 애플리케이션의 API 문서
  version: v1.0.0
  contact:
    name: Todo API Team
    email: todo@example.com
servers:
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: Todo
    description: Todo 관리 API
paths:
  /api/v1/todos:
    get:
      tags:
        - Todo
      summary: 모든 Todo 항목 조회
      description: 시스템에 저장된 모든 Todo 항목을 조회합니다
      operationId: getAllTodos
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoResponse'
    post:
      tags:
        - Todo
      summary: 새 Todo 항목 생성
      description: 새로운 Todo 항목을 생성합니다
      operationId: createTodo
      requestBody:
        description: 생성할 Todo 정보
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoRequest'
      responses:
        '201':
          description: 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
  /api/v1/todos/{id}:
    get:
      tags:
        - Todo
      summary: 특정 Todo 항목 조회
      description: ID로 특정 Todo 항목을 조회합니다
      operationId: getTodoById
      parameters:
        - name: id
          in: path
          description: 조회할 Todo ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '404':
          description: Todo 항목을 찾을 수 없음
    put:
      tags:
        - Todo
      summary: Todo 항목 수정
      description: 기존 Todo 항목을 수정합니다
      operationId: updateTodo
      parameters:
        - name: id
          in: path
          description: 수정할 Todo ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 수정할 Todo 정보
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoRequest'
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '404':
          description: Todo 항목을 찾을 수 없음
    delete:
      tags:
        - Todo
      summary: Todo 항목 삭제
      description: ID로 특정 Todo 항목을 삭제합니다
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          description: 삭제할 Todo ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 삭제 성공
        '404':
          description: Todo 항목을 찾을 수 없음
components:
  schemas:
    TodoRequest:
      type: object
      description: Todo 생성 및 수정 요청 DTO
      required:
        - title
      properties:
        title:
          type: string
          description: Todo 제목
          example: Spring Boot 공부하기
        description:
          type: string
          description: Todo 상세 설명
          example: Swagger UI 적용하기
          nullable: true
        isDone:
          type: boolean
          description: 완료 여부
          example: false
          default: false
    TodoResponse:
      type: object
      description: Todo 응답 DTO
      properties:
        id:
          type: integer
          format: int64
          description: Todo ID
          example: 1
        title:
          type: string
          description: Todo 제목
          example: Spring Boot 공부하기
        description:
          type: string
          description: Todo 상세 설명
          example: Swagger UI 적용하기
          nullable: true
        isDone:
          type: boolean
          description: 완료 여부
          example: false
